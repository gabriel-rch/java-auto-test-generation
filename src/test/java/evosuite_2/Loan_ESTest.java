/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 13 15:38:18 GMT 2024
 */

package evosuite_2;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import model.Loan;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Loan_ESTest extends Loan_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Loan loan0 = new Loan(0, (-4420), (LocalDate) null, 1629.0F);
      loan0.getReturnDate();
      assertEquals(0, loan0.getMemberId());
      assertEquals((-4420), loan0.getBookCode());
      assertEquals(1629.0F, loan0.getDailyFine(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Loan loan0 = new Loan(873, 0, localDate0, (-2375.5F));
      int int0 = loan0.getMemberId();
      assertEquals(0, loan0.getBookCode());
      assertEquals((-2375.5F), loan0.getDailyFine(), 0.01F);
      assertEquals(873, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1));
      Loan loan0 = new Loan((-1), 933, localDate0, 933);
      int int0 = loan0.getMemberId();
      assertEquals(933.0F, loan0.getDailyFine(), 0.01F);
      assertEquals(933, loan0.getBookCode());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Loan loan0 = new Loan(1461, 0, localDate0, 1461);
      float float0 = loan0.getDailyFine();
      assertEquals(1461.0F, float0, 0.01F);
      assertEquals(0, loan0.getBookCode());
      assertEquals(1461, loan0.getMemberId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Loan loan0 = new Loan(873, 0, localDate0, (-2375.5F));
      float float0 = loan0.getDailyFine();
      assertEquals((-2375.5F), float0, 0.01F);
      assertEquals(0, loan0.getBookCode());
      assertEquals(873, loan0.getMemberId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-1));
      Loan loan0 = new Loan((-1), 933, localDate0, 933);
      int int0 = loan0.getBookCode();
      assertEquals(933, int0);
      assertEquals((-1), loan0.getMemberId());
      assertEquals(933.0F, loan0.getDailyFine(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Loan loan0 = new Loan(2443, (-490), (LocalDate) null, (-490));
      int int0 = loan0.getBookCode();
      assertEquals(2443, loan0.getMemberId());
      assertEquals((-490.0F), loan0.getDailyFine(), 0.01F);
      assertEquals((-490), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Loan loan0 = new Loan(873, 0, localDate0, (-2375.5F));
      LocalDate localDate1 = MockLocalDate.ofEpochDay(873);
      float float0 = loan0.calculateFine(localDate1);
      assertEquals(0, loan0.getBookCode());
      assertEquals(2073811.5F, float0, 0.01F);
      assertEquals(873, loan0.getMemberId());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Loan loan0 = new Loan(873, 0, localDate0, (-2375.5F));
      LocalDate localDate1 = MockLocalDate.ofEpochDay(873);
      loan0.setReturnDate(localDate1);
      float float0 = loan0.calculateFine(localDate0);
      assertEquals(873, loan0.getMemberId());
      assertEquals((-2073811.5F), float0, 0.01F);
      assertEquals(0, loan0.getBookCode());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Loan loan0 = new Loan((-3627), (-3627), (LocalDate) null, (-3627));
      // Undeclared exception!
      try { 
        loan0.calculateFine((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.temporal.ChronoUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      LocalDate localDate0 = MockLocalDate.from(zonedDateTime0);
      Loan loan0 = new Loan(0, 0, localDate0, 0);
      int int0 = loan0.getBookCode();
      assertEquals(0, int0);
      assertEquals(0.0F, loan0.getDailyFine(), 0.01F);
      assertEquals(0, loan0.getMemberId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      LocalDate localDate0 = MockLocalDate.from(zonedDateTime0);
      Loan loan0 = new Loan(0, 0, localDate0, 0);
      loan0.extendLoan(localDate0);
      assertEquals(0, loan0.getBookCode());
      assertEquals(0.0F, loan0.getDailyFine(), 0.01F);
      assertEquals(0, loan0.getMemberId());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      LocalDate localDate0 = MockLocalDate.from(zonedDateTime0);
      Loan loan0 = new Loan(0, 0, localDate0, 0);
      int int0 = loan0.getMemberId();
      assertEquals(0, int0);
      assertEquals(0.0F, loan0.getDailyFine(), 0.01F);
      assertEquals(0, loan0.getBookCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      LocalDate localDate0 = MockLocalDate.from(zonedDateTime0);
      Loan loan0 = new Loan(0, 0, localDate0, 0);
      float float0 = loan0.calculateFine(localDate0);
      assertEquals(0, loan0.getBookCode());
      assertEquals(0, loan0.getMemberId());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      LocalDate localDate0 = MockLocalDate.from(zonedDateTime0);
      Loan loan0 = new Loan(0, 0, localDate0, 0);
      loan0.getReturnDate();
      assertEquals(0.0F, loan0.getDailyFine(), 0.01F);
      assertEquals(0, loan0.getMemberId());
      assertEquals(0, loan0.getBookCode());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now((ZoneId) zoneOffset0);
      LocalDate localDate0 = MockLocalDate.from(zonedDateTime0);
      Loan loan0 = new Loan(0, 0, localDate0, 0);
      float float0 = loan0.getDailyFine();
      assertEquals(0, loan0.getMemberId());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, loan0.getBookCode());
  }
}
