/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 13 15:29:42 GMT 2024
 */

package evosuite_1;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import control.Library;
import java.time.Clock;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.IsoChronology;
import java.util.ArrayList;
import model.Book;
import model.Loan;
import model.Member;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.chrono.MockIsoChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Library_ESTest extends Library_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Library library0 = new Library();
      ArrayList<Loan> arrayList0 = new ArrayList<Loan>();
      library0.setLoans(arrayList0);
      assertEquals(0, arrayList0.size());
  }

//  @Test(timeout = 4000)
//  public void test01()  throws Throwable  {
//      Library library0 = new Library();
//      library0.members = null;
//      ArrayList<Member> arrayList0 = library0.getMembers();
//      assertNull(arrayList0);
//  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Library library0 = new Library();
      Member member0 = new Member(0, "$$T1S[t+");
      library0.addMember(member0);
      ArrayList<Member> arrayList0 = library0.getMembers();
      assertTrue(arrayList0.contains(member0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Library library0 = new Library();
      Member member0 = new Member(1, "P");
      Book book0 = new Book("P", "P", 1, 1);
      LocalDate localDate0 = MockLocalDate.now();
      library0.lendBook(book0, member0, localDate0);
      assertFalse(book0.isAvailable());
      
      LocalDate localDate1 = MockLocalDate.ofEpochDay(1);
      float float0 = library0.getMemberFine(member0, localDate1);
      assertEquals(805.7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Library library0 = new Library();
      ArrayList<Loan> arrayList0 = library0.getLoans();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      Clock clock0 = MockClock.system(zoneOffset0);
      LocalDate localDate0 = MockLocalDate.now(clock0);
      ZoneOffset zoneOffset1 = ZoneOffset.ofTotalSeconds(1382);
      Loan loan0 = new Loan(2511, 2511, localDate0, (-1.0F));
      arrayList0.add(loan0);
      Member member0 = new Member(2511, "9)}22DiK_4i4");
      Period period0 = Period.of(904, 0, (-2073));
      IsoChronology isoChronology0 = period0.getChronology();
      LocalDate localDate1 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset1);
      float float0 = library0.getMemberFine(member0, localDate1);
      assertEquals((-1.0F), float0, 0.01F);
  }

//  @Test(timeout = 4000)
//  public void test05()  throws Throwable  {
//      Library library0 = new Library();
//      library0.loans = null;
//      ArrayList<Loan> arrayList0 = library0.getLoans();
//      assertNull(arrayList0);
//  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Library library0 = new Library();
      Member member0 = new Member(1, "P");
      Book book0 = new Book("P", "P", 1, 1);
      LocalDate localDate0 = MockLocalDate.now();
      library0.lendBook(book0, member0, localDate0);
      assertFalse(book0.isAvailable());
      
      ArrayList<Loan> arrayList0 = library0.getLoans();
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Library library0 = new Library();
      LocalDate localDate0 = MockLocalDate.now();
      Loan loan0 = new Loan(1, 1, localDate0, 805.7F);
      double double0 = library0.getFineDiscount(loan0, localDate0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Library library0 = new Library();
      LocalDate localDate0 = MockLocalDate.now();
      Loan loan0 = new Loan(1, 1, localDate0, 1);
      LocalDate localDate1 = MockLocalDate.ofEpochDay(1);
      double double0 = library0.getFineDiscount(loan0, localDate1);
      assertEquals(15987.059068854842, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Library library0 = new Library();
      library0.setBooks((ArrayList<Book>) null);
      ArrayList<Book> arrayList0 = library0.getBooks();
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Library library0 = new Library();
      library0.setMembers((ArrayList<Member>) null);
      // Undeclared exception!
      try { 
        library0.listAllMembers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("control.Library", e);
      }
  }

//  @Test(timeout = 4000)
//  public void test11()  throws Throwable  {
//      Library library0 = new Library();
//      library0.books = null;
//      // Undeclared exception!
//      try {
//        library0.listAllBooks();
//        fail("Expecting exception: NullPointerException");
//
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("control.Library", e);
//      }
//  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Library library0 = new Library();
      Member member0 = new Member((-3654), "");
      Period period0 = Period.ofMonths(0);
      IsoChronology isoChronology0 = period0.getChronology();
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockIsoChronology.dateNow(isoChronology0, (ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        library0.lendBook((Book) null, member0, localDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("control.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Library library0 = new Library();
      Member member0 = new Member(247, "control.Library");
      Book book0 = new Book("control.Library", "control.Library", 247, (-465));
      library0.lendBook(book0, member0, (LocalDate) null);
      // Undeclared exception!
      try { 
        library0.getMemberFine(member0, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

//  @Test(timeout = 4000)
//  public void test14()  throws Throwable  {
//      Library library0 = new Library();
//      library0.books = null;
//      Book book0 = new Book("", "", (-1502), 1360);
//      // Undeclared exception!
//      try {
//        library0.addBook(book0);
//        fail("Expecting exception: NullPointerException");
//
//      } catch(NullPointerException e) {
//         //
//         // no message in exception (getMessage() returned null)
//         //
//         verifyException("control.Library", e);
//      }
//  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Library library0 = new Library();
      Book book0 = new Book("i4mP7-)o{jL]", "i4mP7-)o{jL]", 969, 969);
      Member member0 = new Member(969, "i4mP7-)o{jL]");
      LocalDate localDate0 = MockLocalDate.now();
      library0.lendBook(book0, member0, localDate0);
      try { 
        library0.lendBook(book0, member0, localDate0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The requested book is currently unavailable.
         //
         verifyException("control.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Library library0 = new Library();
      library0.listAllBooks();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Library library0 = new Library();
      library0.setMembers((ArrayList<Member>) null);
      Member member0 = new Member(965, "{1-J6oF");
      // Undeclared exception!
      try { 
        library0.addMember(member0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("control.Library", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Library library0 = new Library();
      library0.addBook((Book) null);
      ArrayList<Book> arrayList0 = library0.getBooks();
      assertFalse(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Library library0 = new Library();
      Member member0 = new Member(969, "i4mP7-)o{jL]");
      LocalDate localDate0 = MockLocalDate.now();
      float float0 = library0.getMemberFine(member0, localDate0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Library library0 = new Library();
      ArrayList<Member> arrayList0 = library0.getMembers();
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Library library0 = new Library();
      library0.listAllMembers();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Library library0 = new Library();
      Loan loan0 = new Loan(0, 0, (LocalDate) null, 0);
      // Undeclared exception!
      try { 
        library0.getFineDiscount(loan0, (LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Library library0 = new Library();
      ArrayList<Book> arrayList0 = library0.getBooks();
      library0.setBooks(arrayList0);
      assertTrue(arrayList0.isEmpty());
  }
}
