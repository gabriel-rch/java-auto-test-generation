/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 13 15:43:44 GMT 2024
 */

package evosuite_3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Clock;
import java.time.Duration;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import model.Loan;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Loan_ESTest extends Loan_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Loan loan0 = new Loan(5731, 5731, (LocalDate) null, 5731);
      loan0.getReturnDate();
      assertEquals(5731.0F, loan0.getDailyFine(), 0.01F);
      assertEquals(5731, loan0.getBookCode());
      assertEquals(5731, loan0.getMemberId());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      LocalDate localDate0 = MockLocalDate.now(zoneId0);
      Loan loan0 = new Loan(396, (-1), localDate0, (-1856.4272F));
      int int0 = loan0.getMemberId();
      assertEquals((-1), loan0.getBookCode());
      assertEquals(396, int0);
      assertEquals((-1856.4272F), loan0.getDailyFine(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-588));
      Loan loan0 = new Loan((-588), (-588), localDate0, 1047.0F);
      int int0 = loan0.getMemberId();
      assertEquals((-588), loan0.getBookCode());
      assertEquals((-588), int0);
      assertEquals(1047.0F, loan0.getDailyFine(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-588));
      Loan loan0 = new Loan((-588), (-588), localDate0, 1047.0F);
      float float0 = loan0.getDailyFine();
      assertEquals((-588), loan0.getMemberId());
      assertEquals((-588), loan0.getBookCode());
      assertEquals(1047.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-3262));
      Loan loan0 = new Loan((-3262), (-3262), localDate0, (-2963.65F));
      float float0 = loan0.getDailyFine();
      assertEquals((-2963.65F), float0, 0.01F);
      assertEquals((-3262), loan0.getBookCode());
      assertEquals((-3262), loan0.getMemberId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Loan loan0 = new Loan(2638, 2638, localDate0, 2638);
      int int0 = loan0.getBookCode();
      assertEquals(2638, loan0.getMemberId());
      assertEquals(2638, int0);
      assertEquals(2638.0F, loan0.getDailyFine(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-588));
      Loan loan0 = new Loan((-588), (-588), localDate0, 1047.0F);
      int int0 = loan0.getBookCode();
      assertEquals(1047.0F, loan0.getDailyFine(), 0.01F);
      assertEquals((-588), int0);
      assertEquals((-588), loan0.getMemberId());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay((-588));
      Loan loan0 = new Loan((-588), (-588), localDate0, 1047.0F);
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      LocalDate localDate1 = MockLocalDate.now((ZoneId) zoneOffset0);
      loan0.setReturnDate(localDate1);
      float float0 = loan0.calculateFine(localDate0);
      assertEquals((-588), loan0.getBookCode());
      assertEquals((-588), loan0.getMemberId());
      assertEquals(1.7489088E7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.now();
      Loan loan0 = new Loan(0, 0, localDate0, 4034.5337F);
      Clock clock0 = MockClock.systemDefaultZone();
      Duration duration0 = Duration.ofDays(2303L);
      Clock clock1 = MockClock.offset(clock0, duration0);
      LocalDate localDate1 = MockLocalDate.now(clock1);
      float float0 = loan0.calculateFine(localDate1);
      assertEquals(0, loan0.getMemberId());
      assertEquals(0, loan0.getBookCode());
      assertEquals((-9291531.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Loan loan0 = new Loan(1, 0, (LocalDate) null, 1884.0087F);
      // Undeclared exception!
      try { 
        loan0.calculateFine((LocalDate) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.temporal.ChronoUnit", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Loan loan0 = new Loan(0, 0, localDate0, 0);
      int int0 = loan0.getBookCode();
      assertEquals(0.0F, loan0.getDailyFine(), 0.01F);
      assertEquals(0, int0);
      assertEquals(0, loan0.getMemberId());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Loan loan0 = new Loan(0, 0, localDate0, 0);
      loan0.extendLoan(localDate0);
      assertEquals(0, loan0.getMemberId());
      assertEquals(0, loan0.getBookCode());
      assertEquals(0.0F, loan0.getDailyFine(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Loan loan0 = new Loan(0, 0, localDate0, 0);
      int int0 = loan0.getMemberId();
      assertEquals(0.0F, loan0.getDailyFine(), 0.01F);
      assertEquals(0, loan0.getBookCode());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Loan loan0 = new Loan(0, 0, localDate0, 0);
      float float0 = loan0.calculateFine(localDate0);
      assertEquals(0, loan0.getMemberId());
      assertEquals(0, loan0.getBookCode());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Loan loan0 = new Loan(0, 0, localDate0, 0);
      loan0.getReturnDate();
      assertEquals(0.0F, loan0.getDailyFine(), 0.01F);
      assertEquals(0, loan0.getBookCode());
      assertEquals(0, loan0.getMemberId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDate localDate0 = MockLocalDate.ofEpochDay(0);
      Loan loan0 = new Loan(0, 0, localDate0, 0);
      float float0 = loan0.getDailyFine();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, loan0.getMemberId());
      assertEquals(0, loan0.getBookCode());
  }
}
